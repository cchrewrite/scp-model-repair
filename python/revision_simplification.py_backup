
import Bgenlib
import sys
import RepSimpLib
import os


if len(sys.argv) != 5:
    print "Error: The number of input parameters should be 4."
    exit(1)

print "Positive Example File: ", sys.argv[1]
print "Negative Example File: ", sys.argv[2]
print "Variable List: ",sys.argv[3]
print "Result Folder: ", sys.argv[4]

pfn = sys.argv[1]
nfn = sys.argv[2]
vlfn = sys.argv[3]
resdir = sys.argv[4]

pf = open(pfn,"r")
nf = open(nfn,"r")

pexp = []
nexp = []
for x in pf.readlines():
    pexp.append(eval(x))
for x in nf.readlines():
    nexp.append(eval(x))

vlf = open(vlfn,"r")
vble_list = []
for x in vlf.readlines():
    u = x.replace("\n","")
    vble_list.append(u)

if pexp == []:
    cfn = resdir + "/result.cond"
    cf = open(cfn,"w")
    cf.write("No Repair.\n")
    cf.close()
    exit()

pexp_source = pexp
nexp_source = nexp


print "Merging IF conditions..."
pexp = []
for x in pexp_source:
    pexp.append(x[0])
nexp = []
for x in nexp_source:
    nexp.append(x[0])

#for x in nexp: print x
#ppppppp

SType = RepSimpLib.get_types_for_progol(pexp + nexp)

for i in xrange(len(pexp)):
    pexp[i] = RepSimpLib.rewrite_state_from_python_to_prolog(pexp[i])
for i in xrange(len(nexp)):
    nexp[i] = RepSimpLib.rewrite_state_from_python_to_prolog(nexp[i])


# [[['TV', 'SONY_PS3', 'Microwave', 'Air_Cond', 'Oven'], '5'], 'Remove_Oven', [['TV', 'SONY_PS3', 'Microwave', 'Air_Cond'], '4']]
#SType = sg.GetSetTypeFromTransList(RepSimpLib.convert_pn_examples_to_translist(pexp) + RepSimpLib.convert_pn_examples_to_translist(nexp))

prog = ["% \"IF condition\" simplification using Aleph.\n"]
prog_d = ["% Directives.\n"]
prog_b = ["% Background Knowledge Section.\n"]
prog_f = ["% Positive Examples Section.\n"]
prog_n = ["% Negative Examples Section.\n"]
prog_e = ["% End Section.\n"]



prog_b.append(":-begin_bg.\n")
prog_f.append(":-begin_in_pos.\n")
prog_n.append(":-begin_in_neg.\n")

prog.append("% Module loading.\n")
prog.append(":- use_module(library(aleph)).\n\n")
prog.append("% Aleph initialization.\n")
prog.append(":- aleph.\n\n")

S = [
  # i --- layers of new variables.
  ":- set(i,5).\n",
  # clauselength --- the maximum length of clause. Default is 4.
  ":- set(clauselength,10).\n",
  # minpos --- the minimum number of positive examples to be covered by a learnt clause
  # ":- set(minpos,2).\n",
  # splitvars --- variables are independent of each other
  ":- set(splitvars,true).\n",
  #":- set(explore,true).\n :- set(depth,100).\n :- set(splitvars,true).\n",
]
prog_d = prog_d + S

S = RepSimpLib.make_iso_example_decl(pexp[0])
prog_d = prog_d + S

#S = RepSimpLib.make_type_defs()
#prog_b = prog_b + S + [""]
S = RepSimpLib.make_general_rules()
prog_b = prog_b + S + [""]
S = RepSimpLib.make_is_bset_rule(SType,5)
prog_b = prog_b + S + [""]

"""
S = [
  "% Special Rules.",
  "is_bset([bS0,bS1,bS2,bS3,bS4,bS5]).",
  "is_bset([bS0,bS1,bS2,bS3,bS4]).",
  "is_bset([bS0,bS1,bS2,bS3]).",
]
prog_b = prog_b + S + [""]
"""
S = RepSimpLib.make_iso_examples(pexp,"pos")
prog_f = prog_f + S + [""]

S = RepSimpLib.make_iso_examples(nexp,"neg")
prog_n = prog_n + S + [""]



prog_d.append("\n")
prog_b.append(":-end_bg.\n\n")
prog_f.append(":-end_in_pos.\n\n")
prog_n.append(":-end_in_neg.\n\n")
prog_e.append(":-aleph_read_all.\n")
prog_e.append(":-induce.\n")
rfn = resdir + "/result.rule"
prog_e.append(":-aleph:write_rules(\"%s\").\n"%rfn)

prog = prog + prog_d + prog_b + prog_f + prog_n + prog_e


for x in prog: print x

plfn = resdir + "/IFsimp.pl"
f = open(plfn,"w")
for x in prog:
    f.write(x)
    f.write("\n")
f.close()


#cmd = "swipl -g \"[tttr], nl, halt\""
cmd = "swipl -g \"consult(\'%s\'), nl, halt\""%plfn
os.system(cmd)

rl = RepSimpLib.read_aleph_rules(rfn)
for x in rl: print x

cond = ""
#vble_list.append("havefun")
for x in rl:
    y = RepSimpLib.rule_to_cond(x,vble_list,resdir)
    y = "( " + y + " )"
    cond = cond + y + " or "

cond = cond[0:len(cond)-4]
print cond

if_cond = cond

print "Done!"
print "The merged IF condition is \"" + if_cond + "\"."


print "Merging THEN substitutions..."

vble_list_subs = []
for x in vble_list:
    vble_list_subs.append(x)
for x in vble_list:
    vble_list_subs.append(x + "_post")

pexp = []
for x in pexp_source:
    pexp.append(x[0] + x[2])

"""
nexp = []
for x in nexp_source:
    nexp.append(x[0] + x[2])
"""


nexp = []
nexp = RepSimpLib.gen_rand_neg_exps(pexp,777)


SType = RepSimpLib.get_types_for_progol(pexp + nexp)

for x in pexp: print x

for i in xrange(len(pexp)):
    pexp[i] = RepSimpLib.rewrite_state_from_python_to_prolog(pexp[i])
for i in xrange(len(nexp)):
    nexp[i] = RepSimpLib.rewrite_state_from_python_to_prolog(nexp[i])


# [[['TV', 'SONY_PS3', 'Microwave', 'Air_Cond', 'Oven'], '5'], 'Remove_Oven', [['TV', 'SONY_PS3', 'Microwave', 'Air_Cond'], '4']]
#SType = sg.GetSetTypeFromTransList(RepSimpLib.convert_pn_examples_to_translist(pexp) + RepSimpLib.convert_pn_examples_to_translist(nexp))

prog = ["% \"IF condition\" simplification using Aleph.\n"]
prog_d = ["% Directives.\n"]
prog_b = ["% Background Knowledge Section.\n"]
prog_f = ["% Positive Examples Section.\n"]
prog_n = ["% Negative Examples Section.\n"]
prog_e = ["% End Section.\n"]



prog_b.append(":-begin_bg.\n")
prog_f.append(":-begin_in_pos.\n")
prog_n.append(":-begin_in_neg.\n")

prog.append("% Module loading.\n")
prog.append(":- use_module(library(aleph)).\n\n")
prog.append("% Aleph initialization.\n")
prog.append(":- aleph.\n\n")

S = [
  # i --- layers of new variables.
  ":- set(i,5).\n",
  # clauselength --- the maximum length of clause. Default is 4.
  ":- set(clauselength,10).\n",
  # minpos --- the minimum number of positive examples to be covered by a learnt clause
  # ":- set(minpos,2).\n",
  # splitvars --- variables are independent of each other
  ":- set(splitvars,true).\n",
  #":- set(explore,true).\n :- set(depth,100).\n :- set(splitvars,true).\n",
  
  #":- sphyp."
  #":- set(evalfn,coverage).",
  #":- set(clauselength,4).",
  #":- set(gsamplesize,20).",
]
prog_d = prog_d + S

S = RepSimpLib.make_iso_example_decl(pexp[0])
prog_d = prog_d + S

#S = RepSimpLib.make_type_defs()
#prog_b = prog_b + S + [""]
S = RepSimpLib.make_general_rules()
prog_b = prog_b + S + [""]
#S = RepSimpLib.make_is_bset_rule(SType,5)
#prog_b = prog_b + S + [""]

"""
S = [
  "% Special Rules.",
  "is_bset([bS0,bS1,bS2,bS3,bS4,bS5]).",
  "is_bset([bS0,bS1,bS2,bS3,bS4]).",
  "is_bset([bS0,bS1,bS2,bS3]).",
]
prog_b = prog_b + S + [""]
"""
S = RepSimpLib.make_iso_examples(pexp,"pos")
prog_f = prog_f + S + [""]

S = RepSimpLib.make_iso_examples(nexp,"neg")
prog_n = prog_n + S + [""]



prog_d.append("\n")
prog_b.append(":-end_bg.\n\n")
prog_f.append(":-end_in_pos.\n\n")
prog_n.append(":-end_in_neg.\n\n")
prog_e.append(":-aleph_read_all.\n")
prog_e.append(":-induce.\n")
#prog_e.append(":- aleph:sphyp.\n")
#prog_e.append(":- rdhyp.\n:- iso_cond(A,B,C,D,E,F,G,H).\n:- sphyp.\n:- show(gcws).\n:- addgcws.\n")
#prog_e.append(":- aleph:rdhyp.\n:- iso_cond(A,B,C,D,E,F,G,H).\n:- aleph:sphyp.\n:- aleph:show(gcws).\n:- aleph:addgcws.\n")
rfn = resdir + "/result.rule"
prog_e.append(":-aleph:write_rules(\"%s\").\n"%rfn)

prog = prog + prog_d + prog_b + prog_f + prog_n + prog_e


for x in prog: print x

plfn = resdir + "/THENsimp.pl"
f = open(plfn,"w")
for x in prog:
    f.write(x)
    f.write("\n")
f.close()


#cmd = "swipl -g \"[tttr], nl, halt\""
cmd = "swipl -g \"consult(\'%s\'), nl, halt\""%plfn
os.system(cmd)

rl = RepSimpLib.read_aleph_rules(rfn)
for x in rl: print x

cond = ""
#vble_list.append("havefun")
for x in rl:
    y = RepSimpLib.rule_to_cond(x,vble_list_subs,resdir)
    y = "( " + y + " )"
    cond = cond + y + " or "

cond = cond[0:len(cond)-4]
print cond

if_cond = cond

print "Done!"
print "The merged THEN condition is \"" + if_cond + "\"."





